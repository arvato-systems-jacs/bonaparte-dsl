/*
 * generated by Xtext
 */
package de.jpaw.bonaparte.dts.dsl.scoping

import de.jpaw.bonaparte.dsl.bonScript.ClassDefinition
import de.jpaw.bonaparte.dsl.bonScript.PackageDefinition
import de.jpaw.bonaparte.dts.dsl.bDts.TsClassDefinition
import java.util.ArrayList
import java.util.List
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.scoping.impl.ImportNormalizer
import org.eclipse.xtext.scoping.impl.ImportedNamespaceAwareLocalScopeProvider

import static extension de.jpaw.bonaparte.dsl.generator.XUtil.*

/**
 * This class contains custom scoping description.
 *
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it
 *
 */
class BDtsScopeProvider extends ImportedNamespaceAwareLocalScopeProvider {

//    def private void recursivelyAddColumnsOfClassAndParents(List<ImportNormalizer> preliminaryResult,
//            ClassDefinition cl, boolean ignoreCase) {
//        var cr = cl
//        while (cr !== null) {
//            //System.out.println("DEBUG:   POJO is " + cl.getName());
//            if (cr.eContainer() === null)  // occurs if a previously referenced import is deleted...
//                return;
//            val bonScriptPd = cr.eContainer as PackageDefinition  // ATTN: the bonScript one!
//            // alternative way to get the namespace could be to run it through a new DefaultDeclarativeQualifiedNameProvider();
//            val qualifiedImportNamespace = bonScriptPd.getName() + "." + cr.getName() + ".*";
//            //System.out.println("DEBUG:   adding " + qualifiedImportNamespace + " to imports...");
//            preliminaryResult.add(createImportedNamespaceResolver(qualifiedImportNamespace, ignoreCase));
//            cr = cr.parent
//        }
//    }
//
//    def private List<ImportNormalizer> getColumnsSub(TsClassDefinition entity, boolean ignoreCase) {
//        val preliminaryResult = new ArrayList<ImportNormalizer>(50);
//        //ListOfColumns loc = (ListOfColumns)context;
//        //System.out.println("DEBUG: Resolver invoked for ListOfColumns inside " + entity.getName());
//        recursivelyAddColumnsOfClassAndParents(preliminaryResult, entity.getPojoType(), ignoreCase);
//        // also add the fields of the entity category class (& parents)
//        if (entity.getTableCategory() !== null)
//            recursivelyAddColumnsOfClassAndParents(preliminaryResult, entity.getTableCategory().getTrackingColumns(), ignoreCase);
//        // also add the fields in a potential tenant discriminator class
//        if (entity.inheritanceRoot.tenantClass !== null)
//            recursivelyAddColumnsOfClassAndParents(preliminaryResult, entity.inheritanceRoot.tenantClass, ignoreCase);
//        //System.out.println("DEBUG: Resolver found " + preliminaryResult.size() + " entries");
//        return preliminaryResult;
//    }

    override protected List<ImportNormalizer> internalGetImportedNamespaceResolvers(EObject context, boolean ignoreCase) {
        return super.internalGetImportedNamespaceResolvers(context, ignoreCase);
    }
}
