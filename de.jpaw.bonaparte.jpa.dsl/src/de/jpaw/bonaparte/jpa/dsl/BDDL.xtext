 /*
  * Copyright 2012 Michael Bischoff
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
  
grammar de.jpaw.bonaparte.jpa.dsl.BDDL with de.jpaw.bonaparte.dsl.BonScript
//grammar de.jpaw.bonaparte.jpa.dsl.BDDL with org.eclipse.xtext.common.Terminals

generate bDDL "http://www.jpaw.de/bonaparte/jpa/dsl/BDDL"

import "http://www.jpaw.de/bonaparte/dsl/BonScript" as pojos
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes	// to allow checking of referenced imports

@Override
Model:
    includes        += IncludeDefinition*
    imports         += ImportDefinition*
    (defaults        = DefaultsDefinition)?
    (packages       += PackageDefinition |
     bddlPackages   += BDDLPackageDefinition
    )*
;
    
IncludeDefinition:
    'include' importURI=STRING
;

DefaultsDefinition:
    'default' {DefaultsDefinition}
    ('tablenamepattern' namePattern=STRING ('dropSuffix' dropSuffix=STRING)?)?
    (('tablespacepattern' tablespacePattern=STRING) | 
     ('tablespace' tablespaceName=ID ('index' indexTablespacename=ID)?))?
    ';'
;

enum Permission:
    SELECT='SELECT'|INSERT='INSERT'|UPDATE='UPDATE'|DELETE='DELETE';
    
PermissionList:
    (permissions += Permission (',' permissions += Permission)*);
    
GrantList:
    roleOrUserName = ID ':' permissions = PermissionList ';';
    
GrantCategoryDefinition:
    'grants' name=ID '{'
        grants += GrantList*
    '}'
;

ColumnNameMapping: 
    javaName = ID ':' sqlName = ID ';'
;

ColumnNameMappingDefinition: 
    'nameMappings' name=ID
    ('extends' extendsMapping = [ColumnNameMappingDefinition|QualifiedId])?
    '{'
        mappings += ColumnNameMapping*
    '}'
;

TableCategoryDefinition:
    'category' name=ID '{'
        ('trackinggroup' trackingColumns=[pojos::ClassDefinition|QualifiedId]
            (('autoSetter' autoSetter=QualifiedId) | ('entityListener' entityListener=[jvmTypes::JvmGenericType|QualifiedId]))?
        )?
        ('tablenamepattern' namePattern=STRING ('dropSuffix' dropSuffix=STRING)?)?
        (('tablespacepattern' tablespacePattern=STRING) | 
         ('tablespace' tablespaceName=ID ('index' indexTablespacename=ID)?))?
        (('history' historyCategory=[TableCategoryDefinition|QualifiedId] ('sequence' historySequenceName=ID)?) |
         ('historyColumns' historySequenceColumn = ID ',' historyChangeTypeColumn = ID (actualData?='actualData')?))?  
        (requiresPk ?= 'requiresPK')?
        (doBeanVal ?= 'beanVal')?
        ('grants' grantGroup = [GrantCategoryDefinition|QualifiedId])?
        ('nameMappings' nameMappingGroup = [ColumnNameMappingDefinition|QualifiedId])?
    '}'
;

BDDLPackageDefinition:
    (javadoc = JAVADOC_COMMENT)?
    ('@Generator' '(' (noJava?='noJava' | noMapper?='noMapper' | noKeyMapper?='noKeyMapper') ')')?
    (isDeprecated?='@Deprecated')?
    'package' ('(' prefix=QualifiedId ')')? name=QualifiedId // prefix is generated but not stored in serialized form, default is de.jpaw.bonaparte.pojos
        ('bundle' bundle = QualifiedId)?  // bundles are coarser structures than packages, they correspond to OSGi bundles
        'owner'  schemaOwner = ID
        'prefix' dbPrefix = ID
        (noUserTypes ?= 'noUserTypes')?     // do not use JodaTime and ByteArray in entity classes directly, but convert in getters/setters
        (allSerializable ?= 'allSerializable')?
       (forceSetters ?= 'forceSetters')?    // force setters for all ManyToOnes of all entities
    '{' 
        ('fields' visibility=Visibility ';')?
        (grantCategories += GrantCategoryDefinition  
        | nameMappings += ColumnNameMappingDefinition
        | tableCategories += TableCategoryDefinition
        | entities += EntityDefinition
        | embeddables += EmbeddableDefinition
        | converters += ConverterDefinition
        )*
    '}'
;

enum Inheritance:
    NONE='none' | SINGLE_TABLE='singleTable' | TABLE_PER_CLASS='tablePerClass' | JOIN='join' | DB_SPECIFIC='objectRelational' | SERIALIZED='serialized';

EmbeddableDefinition:
    (javadoc = JAVADOC_COMMENT)?
    (isDeprecated?='@Deprecated')?
    'embeddable' name = ID 'is' pojoType=[pojos::ClassDefinition|QualifiedId]
    (doBeanVal ?= 'beanVal')?
    '{'
        ('nameMappings' nameMappingGroup = [ColumnNameMappingDefinition|QualifiedId])?        
        ('@Embeddable' embeddables += EmbeddableUse)*
    '}'
;

// JPA 2.1 type converters
ConverterDefinition:
    (javadoc = JAVADOC_COMMENT)?
    (isDeprecated?='@Deprecated')?
    'converter' name = ID 'for' (
        ('enum'     myEnum    =[pojos::EnumDefinition|QualifiedId]) |
        ('xenum'    myXEnum   =[pojos::XEnumDefinition|QualifiedId]) |
        ('enumset'  myEnumset =[pojos::EnumSetDefinition|QualifiedId]) |
        ('xenumset' myXEnumset=[pojos::XEnumSetDefinition|QualifiedId]) |
        ('adapter'  myAdapter =[pojos::ClassDefinition|QualifiedId])
    )
    ';'
;

EntityDefinition:
    (javadoc = JAVADOC_COMMENT)?
    (isDeprecated?='@Deprecated')?
    ('@Generator' '(' (doMapper?= 'doMapper' | noJava?='noJava' | noMapper?='noMapper' | noKeyMapper?='noKeyMapper') ')')?
    (isAbstract?='abstract')?  // abstract means mappedSuperclass
    'entity' name = ID      
        // 'type' tabletype=TableType
        ('category' optTableCategory=[TableCategoryDefinition|QualifiedId])?
        'is' pojoType=[pojos::ClassDefinition|QualifiedId]
        ('tablename' tablename = ID)?  // overwrite auto-generated tablename
        ('historytablename' historytablename = ID)?  // overwrite auto-generated tablename
        ('tablespace' tablespaceName=ID ('index' indexTablespacename=ID)?)?
        (('autoSetter' autoSetter=QualifiedId) | ('entityListener' entityListener=[jvmTypes::JvmGenericType|QualifiedId]))?
        ('inheritance' xinheritance=Inheritance ('discriminator' discname=ID ((discriminatorTypeInt ?= 'int') | discriminatorValue=STRING))?
         | ('inherits' (extends=[EntityDefinition|QualifiedId] ('discriminator' discriminatorValue=STRING)? )))?
        (('extends' extendsClass=[pojos::ClassDefinition|QualifiedId])  // unused / unusable? or mapped superclass?
         | ('extendsJava' extendsJava=QualifiedId)
        )?
        ('implements' implementsJavaInterface = [jvmTypes::JvmGenericType|QualifiedId] )?
        (serializable ?= 'serializable')?
    '{'
        ('fields' visibility=Visibility ';')?
        (forceSetters ?= 'forceSetters')?  // enforce setters for all ManyToOne relationships
        (cacheable ?= 'cacheable')?
        // EclipseLink specific caching: do not use
        ('cache'  cacheSize=INT 'objects' 'for' cacheExpiry=INT cacheExpiryScale = ('second'|'seconds' | 'minute'|'minutes' | 'hour'|'hours' | 'day'|'days'))?
        ('tenantClass' tenantClass = [pojos::ClassDefinition|QualifiedId] (tenantInJoinedTables?='join')?)?
        ('tenant' tenantId = SingleColumn)?
        // ('foreign' 'keys' '{' foreignKeys += ForeignKeyDefinition* '}')?
        ('nameMappings' nameMappingGroup = [ColumnNameMappingDefinition|QualifiedId])?        
        ('pk'     ('is' pkPojo = [pojos::ClassDefinition|QualifiedId])? (pk = ListOfColumns (isIdGenerated?='generated' ('=' generatedIdDetails=STRING)?)?)? )?
        ('index'  index   += IndexDefinition)*
        ('collections' '{' collections += CollectionDefinition* '}')?               // unused???
        (('@ManyToOne'  manyToOnes  += ManyToOne ) |
         ('@OneToOne'   oneToOnes   += OneToOne  ) |
         ('@OneToMany'  oneToManys  += OneToMany ) |
         ('@Embeddable' embeddables += EmbeddableUse) |
         ('@ElementCollection' elementCollections += ElementCollectionRelationship )
        )* 
    '}'       
;

ManyToOne:
    relationship = Relationship
//    (rorw = ('ro' | 'rw'))?    // ro = not updateable, rw = updateable, none of the above: not updateable, but separate key field will be defined which is
    (forceSetters ?= 'forceSetters')?
;

Relationship:
    childObject = [EntityDefinition|QualifiedId] name = ID 
    (fetchType = ('LAZY' | 'EAGER'))?
    ('for' referencedFields = ListOfColumns )  // later: add alternative for local field 
;

OneToMany:
    (collectionType = 'List' |
     collectionType = 'Set' |
    (collectionType = 'Map' '<' indexType=('String' | 'Integer' | 'Long') '>' 'mapKey' mapKey = ID // (':' mapKeySize = INT)?
    ))
    relationship = Relationship
    (cascade       ?= 'cascade')?
    (orphanRemoval ?= 'orphanRemoval')?
    ('join'  joinColumnDirective = STRING)?
;

OneToOne:
    relationship = Relationship
    (cascade       ?= 'cascade')?    
    (orphanRemoval ?= 'orphanRemoval')?
    ('join'  joinColumnDirective = STRING)?
;

ElementCollectionRelationship:
    name = [pojos::FieldDefinition]
    (fetchType = ('LAZY' | 'EAGER'))?
    'in' tablename = ID
    '(' keyColumns += ID (',' keyColumns += ID )* ')'
    ('extraKey' extraKeyColumns += ID (',' extraKeyColumns += ID )*)?
    ('mapKey' mapKey = ID (':' mapKeySize = INT)? )? 
    ('historytablename' historytablename = ID)? 
;

CollectionDefinition:
    map = [pojos::FieldDefinition] 'in' tablename = ID '.' '(' refcolumn = ID ',' keycolumn = ID ('(' size=INT ')')? ')'
;

EmbeddableUse:
    name = [EmbeddableDefinition|QualifiedId] 'for' field=[pojos::FieldDefinition] ('prefix' prefix=ID)? ('suffix' suffix=ID)? ('is' isPk = 'pk')?
;

ForeignKeyDefinition:
    'field' name = [pojos::FieldDefinition] 'references' ownerEntity = [EntityDefinition|QualifiedId] '.' referencedFieldName = ID ';'
;

IndexDefinition:
    (isUnique ?= 'unique')?
    columns = ListOfColumns
;

// by custom ScopeProvider implementation, an appropriate importedNamespace will be added here
ListOfColumns:
    '(' columnName += [pojos::FieldDefinition] (',' columnName += [pojos::FieldDefinition])* ')'    
;
// by custom ScopeProvider implementation, an appropriate importedNamespace will be added here
SingleColumn:
    singleColumnName = [pojos::FieldDefinition]    
;
