module de.jpaw.bonaparte.jpa.dsl.GenerateBDDL

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

import org.eclipse.emf.mwe.utils.*

var rootPath = ".."

Workflow {
//    bean = StandaloneSetup {
//        scanClassPath = true
//        platformUri = ".."
//        registerGeneratedEPackage = "de.jpaw.bonaparte.dsl.bonScript.BonScriptPackage"
//        registerGenModelFile = "platform:/resource/de.jpaw.bonaparte.dsl/model/generated/BonScript.genmodel"
//    }

        component = XtextGenerator {
                configuration = {
                        project = StandardProjectConfig {
                                baseName = "de.jpaw.bonaparte.jpa.dsl"
                                rootPath = rootPath
                                runtimeTest = {
                                        enabled = true
                                }
                                eclipsePlugin = {
                                        enabled = true
                                }
                                eclipsePluginTest = {
                                        enabled = true
                                }
                                createEclipseMetaData = true
                        }
                        code = {
                                encoding = "UTF-8"
                                lineDelimiter = "\n"
                                fileHeader = "/*\n * generated by Xtext \${version}\n */"
                        }
                }
                language = StandardLanguage {
                        name = "de.jpaw.bonaparte.jpa.dsl.BDDL"
                        fileExtensions = "bddl"
        				referencedResource = "platform:/resource/de.jpaw.bonaparte.dsl/model/generated/BonScript.genmodel"

                        serializer = {
                                generateStub = false
                        }
                        validator = {
                                // composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
                        }
                }
        }
}
//module de.jpaw.bonaparte.jpa.dsl.GenerateBDDL
//
//import org.eclipse.emf.mwe.utils.*
//import org.eclipse.xtext.generator.*
//import org.eclipse.xtext.ui.generator.*
//
//var projectName = "de.jpaw.bonaparte.jpa.dsl"
//var grammarURI = "platform:/resource/${projectName}/src/de/jpaw/bonaparte/jpa/dsl/BDDL.xtext"
//var file.extensions = "bddl"
//var runtimeProject = "../${projectName}"
//
//Workflow {
//    bean = StandaloneSetup {
//        scanClassPath = true
//        platformUri = "${runtimeProject}/.."
//        // The following two lines can be removed, if Xbase is not used.
//        //registerGeneratedEPackage = "org.eclipse.xtext.xbase.XbasePackage"
//        //registerGenModelFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
//        // XXXX the next 2 lines reference the bonaparte DSL
//        registerGeneratedEPackage = "de.jpaw.bonaparte.dsl.bonScript.BonScriptPackage"
//        registerGenModelFile = "platform:/resource/de.jpaw.bonaparte.dsl/model/generated/BonScript.genmodel"
//    }
//        
//    component = DirectoryCleaner {
//        directory = "${runtimeProject}/src-gen"
//    }
//
//    component = DirectoryCleaner {
//        directory = "${runtimeProject}/model/generated"
//    }
//
//    component = DirectoryCleaner {
//        directory = "${runtimeProject}.ui/src-gen"
//    }
//
//    component = DirectoryCleaner {
//        directory = "${runtimeProject}.tests/src-gen"
//    }
// 
//    component = Generator {
//        pathRtProject = runtimeProject
//        pathUiProject = "${runtimeProject}.ui"
//        pathTestProject = "${runtimeProject}.tests"
//        projectNameRt = projectName
//        projectNameUi = "${projectName}.ui"
//        language = {
//            uri = grammarURI
//            fileExtensions = file.extensions
//
//            // Java API to access grammar elements (required by several other fragments)
//            fragment = grammarAccess.GrammarAccessFragment {}
//
//            // generates Java API for the generated EPackages
//            fragment = ecore.EMFGeneratorFragment auto-inject {}
////            fragment = ecore.EcoreGeneratorFragment {
////            // referencedGenModels = "
////            //  platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel,
////            //  platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.genmodel
////            // "
////            // XXX access to BonScript: deprecated
////            //referencedGenModels = "
////            //  platform:/resource/de.jpaw.bonaparte.dsl/model/generated/de/jpaw/bonaparte/dsl/BonScript.genmodel
////            //"
////            }
//
//            // Serializer 2.0
//            fragment = serializer.SerializerFragment {
//            	generateStub = false
//            }
//            
//            // the serialization component (1.0)
//            // fragment = parseTreeConstructor.ParseTreeConstructorFragment {}
//
//            // a custom ResourceFactory for use with EMF
//            fragment = resourceFactory.ResourceFactoryFragment {
//                fileExtensions = file.extensions
//            }
//
//            // The antlr parser generator fragment.
//            fragment = parser.antlr.XtextAntlrGeneratorFragment {
//            //  options = {
//            //      backtrack = true
//            //  }
//            }
//
//            // java-based API for validation
//            fragment = validation.ValidatorFragment auto-inject {
//            //    composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
//            //  enable a check that no two objects of the same name are allowed within the same scope
//                composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
//            }
//
//            // scoping and exporting API
//            //fragment = de.jpaw.bonaparte.jpa.dsl.BDDLScopingFragment {}
//            //fragment = scoping.ImportURIScopingFragment {}  // TODO! include for bddl files, import for *.bon
//            //     fragment = exporting.SimpleNamesFragment {}
//
//            // scoping and exporting API
//            fragment = scoping.ImportNamespacesScopingFragment {}
//            fragment = exporting.QualifiedNamesFragment {}
//            fragment = builder.BuilderIntegrationFragment {}
//
//            // generator API
//            fragment = generator.GeneratorFragment {
//                generateMwe = false
//                generateJavaMain = false
//            }
//
//            // formatter API
//            fragment = formatting.FormatterFragment {}
//
//            // labeling API
//            fragment = labeling.LabelProviderFragment {}
//
//            // outline API
//            fragment = outline.OutlineTreeProviderFragment {}
//            fragment = outline.QuickOutlineFragment {}
//
//            // quickfix API
//            fragment = quickfix.QuickfixProviderFragment {}
//
//            // content assist API
//            fragment = contentAssist.JavaBasedContentAssistFragment {}
//
//            // generates a more lightweight Antlr parser and lexer tailored for content assist
//            fragment = parser.antlr.XtextAntlrUiGeneratorFragment {}
//
//            // generates junit test support classes into Generator#pathTestProject
//            fragment = junit.Junit4Fragment {}
//
//            // project wizard (optional)
//            // fragment = projectWizard.SimpleProjectWizardFragment {
//            //      generatorProjectName = "${projectName}"
//            //      modelFileExtension = file.extensions
//            // }
//
//            // rename refactoring
//            fragment = refactoring.RefactorElementNameFragment {}
//
//            // provides the necessary bindings for java types integration
//            fragment = types.TypesGeneratorFragment {}
//
//            // generates the required bindings only if the grammar inherits from Xbase
//            fragment = xbase.XbaseGeneratorFragment {}
//
//            // provides a preference page for template proposals
//            fragment = templates.CodetemplatesGeneratorFragment {}
//
//            // provides a compare view
//            fragment = compare.CompareFragment {
//                 fileExtensions = file.extensions
//            }
//
//        }
//    }
//}
//
