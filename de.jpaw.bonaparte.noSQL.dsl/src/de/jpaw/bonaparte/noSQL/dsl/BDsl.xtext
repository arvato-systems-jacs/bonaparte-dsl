grammar de.jpaw.bonaparte.noSQL.dsl.BDsl with de.jpaw.bonaparte.dsl.BonScript

generate bDsl "http://www.jpaw.de/bonaparte/noSQL/dsl/BDsl"
 /*
  * Copyright 2014 Michael Bischoff
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
  
import "http://www.jpaw.de/bonaparte/dsl/BonScript" as pojos
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes    // to allow checking of referenced imports

@Override
Model:
    includes        += IncludeDefinition*
    imports         += ImportDefinition*
    (defaults        = DefaultsDefinition)?
    (packages       += PackageDefinition |
     bdslPackages   += BDSLPackageDefinition
    )*
;
    
IncludeDefinition:
    'include' importURI=STRING
;

DefaultsDefinition:
    'default' {DefaultsDefinition}
    ('setnamepattern' namePattern=STRING ('dropSuffix' dropSuffix=STRING)?)?
    ('namespace' tablespaceName=ID)?
    ';'
;

TableCategoryDefinition:
    'category' name=ID '{'
    ('trackinggroup' trackingColumns=[pojos::ClassDefinition|QualifiedId]
     'trackingupdater' trackingUpdater=[jvmTypes::JvmGenericType|QualifiedId]
    )?
    ('setnamepattern' namePattern=STRING ('dropSuffix' dropSuffix=STRING)?)?
    ('namespace' tablespaceName=ID)?
    '}'
;

BDSLPackageDefinition:
    (javadoc = JAVADOC_COMMENT)?
    'package' ('(' prefix=QualifiedId ')')? name=QualifiedId // prefix is generated but not stored in serialized form, default is de.jpaw.bonaparte.pojos
        ('bundle' bundle = QualifiedId)?  // bundles are coarser structures than packages, they correspond to OSGi bundles
        'prefix' dbPrefix = ID
    '{' (
         tableCategories += TableCategoryDefinition
        | entities += EntityDefinition
        )*
    '}'
;

enum StorageProvider:
    AEROSPIKE='aerospike' | CASSANDRA='Cassandra' | EHCACHE='ehcache' | HAZELCAST='hazelcast' | OFFHEAPMAP='ohm' | OPENHFT='openHFT';

EntityDefinition:
    (javadoc = JAVADOC_COMMENT)?
    (isDeprecated?='@Deprecated')?
//    (isAbstract?='abstract')?
    'entity' name = ID
        // 'type' tabletype=TableType
        'category' tableCategory=[TableCategoryDefinition|QualifiedId]
        'is' pojoType=[pojos::ClassDefinition|QualifiedId]
        ('setname' tablename = ID)?  // overwrite auto-generated tablename
        provider = StorageProvider
        ('namespace' tablespaceName=ID)?
        (('inherits' (extends=[EntityDefinition|QualifiedId])))?
        ('extends' extendsClass=[pojos::ClassDefinition|QualifiedId])?  // unused / unusable? or mapped superclass?
        ('implements' implementsJavaInterface = [jvmTypes::JvmGenericType|QualifiedId] )?
    '{'
        ('tenantClass' tenantClass = [pojos::ClassDefinition|QualifiedId])?
//        ('tenant'      tenantId = SingleColumn)?
        ('pk'          pk       = ListOfColumns )?
        ('index'       indexes += IndexDefinition)*
        ('bins'        bins     = ListOfColumns)?       // defines explicit bins
    '}'       
;

IndexDefinition:
    (isUnique ?= 'unique')?
    name = [pojos::ClassDefinition|QualifiedId]
    columns = ListOfColumns
;




// by custom ScopeProvider implementation, an appropriate importedNamespace will be added here
ListOfColumns:
    '(' columnName += [pojos::FieldDefinition] (',' columnName += [pojos::FieldDefinition])* ')'    
;
// by custom ScopeProvider implementation, an appropriate importedNamespace will be added here
SingleColumn:
    singleColumnName = [pojos::FieldDefinition]    
;
