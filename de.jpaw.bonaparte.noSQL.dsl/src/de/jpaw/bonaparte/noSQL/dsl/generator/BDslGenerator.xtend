/*
 * generated by Xtext
 */
package de.jpaw.bonaparte.noSQL.dsl.generator

import de.jpaw.bonaparte.noSQL.dsl.generator.java.JavaGeneratorMain
import java.util.concurrent.atomic.AtomicInteger
import javax.inject.Inject
import org.apache.log4j.Logger
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import de.jpaw.bonaparte.dsl.generator.BonScriptGenerator

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class BDslGenerator implements IGenerator {
    private static Logger logger = Logger.getLogger(BDslGenerator)
    private static final AtomicInteger globalId = new AtomicInteger(0)
    private final int localId = globalId.incrementAndGet
    
    @Inject BonScriptGenerator bonaparteGenerator
    @Inject JavaGeneratorMain generatorJava
    
    def private String filterInfo() {
        "#" + localId + ": "   
    }
    
    public new() {
        logger.info("BDslGenerator constructed. " + filterInfo)
    }
    
    override void doGenerate(Resource resource, IFileSystemAccess fsa) {
        
        bonaparteGenerator.doGenerate(resource, fsa)
        
        logger.info(filterInfo + "start code output: Java output for " + resource.URI.toString);
        generatorJava.doGenerate(resource, fsa)
        
        logger.info(filterInfo + "start cleanup");
    }
}
