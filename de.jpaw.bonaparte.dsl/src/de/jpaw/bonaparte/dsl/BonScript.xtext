 /*
  * Copyright 2012 Michael Bischoff
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
  
grammar de.jpaw.bonaparte.dsl.BonScript with org.eclipse.xtext.common.Terminals
/* NEW: required for generics
grammar de.jpaw.bonaparte.dsl.BonScript with org.eclipse.xtext.xbase.Xbase // org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/xtext/xbase/Xtype"        as xTypes */
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes	// to allow checking of referenced imports
// used here are JvmAnnotationType and JvmGenericType

generate bonScript "http://www.jpaw.de/bonaparte/dsl/BonScript"

Model:
    imports  += ImportDefinition*
    packages += PackageDefinition*
;

//terminal ML_JAVADOC_COMMENT : '/#' -> '#/';
//terminal SL_JAVADOC_COMMENT : '/-' !('\n'|'\r')* ('\r'? '\n')?;
    


terminal ML_COMMENT: '/*' !'*'-> '*/' ;     // overwrite ML_COMMENT to derive the non-Terminal JAVADOC comment
terminal JAVADOC_COMMENT: '/**' -> '*/';    // and provide a separate JavaDoc multiline comment


QualifiedId: 
    ID ('.' ID)*
;
QualifiedIdWithWildcard: 
    QualifiedId ('.*')?
;

ImportDefinition:
    'import' importedNamespace=QualifiedIdWithWildcard
;
 
// enums for field attributes. Defaults can be set at package or class level
enum XVisibility:
    PUBLIC='public' | PRIVATE='private' | PROTECTED='protected' | DEFAULT='default';  // default means standard Java visibility
enum XSignedness:
    SIGNED='signed' | UNSIGNED='unsigned';
enum XRequired:
    REQUIRED='required' | OPTIONAL='optional';
enum XTrimming:
    TRIM='trim' | NOTRIM='notrim';
enum XEnumDefaults:
    ENUM='enum' | NOENUM='noenum';
enum XTruncating:
    TRUNCATE='truncate' | NOTRUNCATE='failOnOversize';
enum XRounding:
    ROUND='round' | NOROUND='failOnExtraDecimals';
enum XAutoScale:
    AUTOSCALE='autoScale' | NOAUTOSCALE='noScale';
enum XSpecialCharsSetting:
    ALLOW_CONTROL_CHARS = 'allowControlChars' | NO_CONTROL_CHARS = 'noControlChars';
enum XUsePrimitives:
    USE_PRIMITIVES = 'usePrimitives' | USE_BOXED = 'useBoxed';
// enums for class level settings
enum XXmlAccess:
    NOXML = 'noXML' | NONE = 'NONE' | FIELD = 'FIELD' | PROPERTY = 'PROPERTY' | PUBLIC_MEMBER = 'PUBLIC_MEMBER'; // last two should be equivalent due to generated code
enum XExternalizable:
    NOEXT = 'noExt' | EXT = 'Ext';
enum XHazelcast:
    NOHAZEL = 'noHazelcast' | DATA_SERIALIZABLE = 'DataSer' | IDENTIFIED_DATA_SERIALIZABLE = 'IdDataSer' | PORTABLE = 'Portable' | BOTH = 'IdDataSerAndPortable';
enum XBeanValidation:
    NOBEAN_VAL = 'noBeanVal' | BEAN_VAL = 'BeanVal';
enum XBeanNames:
    NO_BEAN_NAMES = 'noJavaBeanNames' | BEAN_AND_SIMPLE_NAMES = 'JavaBeanNames' | ONLY_BEAN_NAMES = 'onlyJavaBeanNames';
    
// We need a special "undefined" setting for enums. According to the XText documentation (2.3, section 6.2.7),
// ECore does not support this currently. Therefore extra artificial types are required to represent null values.
// therefore all this weird workaround is required
Visibility:          x = XVisibility;
Signedness:          x = XSignedness;
Required:            x = XRequired;
Trimming:            x = XTrimming;
EnumDefaults:        x = XEnumDefaults;
Truncating:          x = XTruncating;
SpecialCharsSetting: x = XSpecialCharsSetting;
UsePrimitives:       x = XUsePrimitives;
Rounding:            x = XRounding;
AutoScale:           x = XAutoScale;

XmlAccess:           x = XXmlAccess;
Externalizable:      x = XExternalizable;
Hazelcast:           x = XHazelcast;
BeanValidation:      x = XBeanValidation;
BeanNames:           x = XBeanNames;

FieldDefaultsDefinition:
    'default' {FieldDefaultsDefinition}
        (visibility    = Visibility)?             // default for classes, member fields
        ((signed       = Signedness)? &           // numeric integers: if not provided, default is signed
        (required      = Required)? &             // default is required for lower case types
        (trim          = Trimming)? &             // Unicode & Ascii: default is notrim (conserve leading and trailing spaces)
        (enumDefault   = EnumDefaults)? &         // Preset enum value with first field?
        (truncate      = Truncating)? &           // Unicode & Ascii: default is fail on oversized input. This allows to just skip extra data
        (round         = Rounding)? &             // BigDecimals: record an error if too many decimals are seen?
        (autoScale     = AutoScale)? &            // BigDecimals: scale it to the specified number of digits in any case?
        (allowCtrls    = SpecialCharsSetting)? &  // Unicode fields: allow control characters: default: no
        (usePrimitives = UsePrimitives)?          // allow primitive types in objects, these can never be null
         // (rawFormat = ('hex' | 'base64'))?     // Raw data: how to serialize
         )
    ';'
;

// packages loosely correspond to Java packages, in OSGi environments, they would be mapped to application modules
PackageDefinition:
    (javadoc = JAVADOC_COMMENT)?
    'package ' ('(' prefix=QualifiedId ')')? name=QualifiedId   // prefix is generated but not stored in serialized form, default is de.jpaw.bonaparte.pojos
        ('XML' xmlAccess = XmlAccess ('NAMESPACE' xmlNs = STRING)?)?        // set @XmlAccess annotation
        (isExternalizable = Externalizable)?                    // decide if implements Externalizable
        (doHazelcast = Hazelcast)?								// decide if hazelcast support is added
        (doBeanValidation = BeanValidation)?                    // decide if some JSR 303 Bean Validation annotations should be generated
        (doBeanNames = BeanNames)?                              // create JavaBean compliant names, or plain firstUpperCase, or both (default)
        ('bundle' bundle = QualifiedId)?  // bundles are coarser structures than packages, they correspond to OSGi bundles
        ('factoryId' hazelcastFactoryId = INT)?
    '{'  
        (defaults = FieldDefaultsDefinition)?
        ('properties' ((inheritProperties ?= 'inherited') | validProperties += PropertyDefinition)  (',' validProperties += PropertyDefinition)* ';')? 
        types   += TypeDefinition*
        enums   += EnumDefinition*
		xenums  += XEnumDefinition*
        classes += ClassDefinition*
    '}'
;

PropertyDefinition:
    name = ID ('is' annotationReference=[jvmTypes::JvmAnnotationType|QualifiedId] (withArg ?= '(' ')')? )?
;

PropertyUse:
    key = [PropertyDefinition] ('=' value=STRING)?
;

GenericsDef:
    name = ID ('extends' extends = ClassReference)?
;

ClassReference:
    (plainObject ?= 'Object') |
    ('!' genericsParameterRef = [GenericsDef|ID]) |
    (classRef = [ClassDefinition|QualifiedId]
        ('<' classRefGenericParms += ClassReference (',' classRefGenericParms += ClassReference)* '>')?
    )
;

// a class corresponds to a Java class
ClassDefinition:
    (javadoc = JAVADOC_COMMENT)?
    (isDeprecated?='@Deprecated')?
    (abstract?='abstract' | final?='final')?
    ((unfreezable ?= 'not')? immutable?='immutable')?                 // no setters, final fields (requires use of all-args constructor)
    'class'
     name = ID ('<' genericParameters += GenericsDef (',' genericParameters += GenericsDef)* '>')?
    (noJava ?= 'nojava')?                               // suppress code generation (if only used for other purposes) 
    ('XML' xmlAccess = XmlAccess ('NAMESPACE' xmlNs = STRING)?)?    // set @XmlAccess annotation
    (isExternalizable = Externalizable)?                // decide if implements Externalizable
    (doHazelcast = Hazelcast)?				   			// decide if hazelcast support is added
    (doBeanValidation = BeanValidation)?                // decide if some JSR 303 Bean Validation annotations should be generated
    (doBeanNames = BeanNames)?                          // create JavaBean compliant names, or plain firstUpperCase, or both (default)
    ('RTTI' (addRtti ?= '+')? rtti = INT)?              // numeric runtime type information
    ('classId' hazelcastId = INT)?
    ('revision' revision = STRING)?
    ('extends' extendsClass=ClassReference)?
    ('orderedBy' orderedByList=ComparableFieldsList)?
    ('implements' implementsInterfaceList = InterfaceListDefinition)?
    ('return' returnsClassRef = ClassReference)?
    ('pk' pkClass = [ClassDefinition])?
    (doCacheHash ?= 'cacheHash')?
    (noAllFieldsConstructor ?= 'noAllFieldsConstructor')?
    (publicMeta ?= 'public' 'type')?					// make field metadata public
    '{'
        (defaults = FieldDefaultsDefinition)?
        ('properties' ((inheritProperties ?= 'inherited') | properties += PropertyUse)  (',' properties += PropertyUse)* ';')?
        fields += FieldDefinition*   
    '}'
;

ComparableFieldsList:
       '('
       field += [FieldDefinition]
       (',' field += [FieldDefinition])*
       ')'
;

InterfaceListDefinition:
    ilist += [jvmTypes::JvmGenericType|QualifiedId] /*JvmParameterizedTypeReference*/
    (',' ilist += [jvmTypes::JvmGenericType|QualifiedId])*  
;


// a class corresponds to a Java class
XEnumDefinition:
    (javadoc = JAVADOC_COMMENT)?
    (isDeprecated?='@Deprecated')?
    (abstract?='abstract' | final?='final')?
    'xenum'
     name = ID
    ('XML' xmlAccess = XmlAccess ('NAMESPACE' xmlNs = STRING)?)?    // set @XmlAccess annotation
//    (isExternalizable = Externalizable)?                // decide if implements Externalizable
//    ('revision' revision = STRING)?						// revisions are currently not supported for XEnums
    'is' myEnum=[EnumDefinition]
    ((':' maxlength=INT) | ('extends' extendsXenum=[XEnumDefinition]))?
;

EnumDefinition:
    (javadoc = JAVADOC_COMMENT)?
    (isDeprecated?='@Deprecated')?
    'enum' name = ID '{'
        ((values += ID (',' values += ID)*) |
         (avalues += EnumAlphaValueDefinition (',' avalues += EnumAlphaValueDefinition)*))
    '}'   
;

EnumAlphaValueDefinition:
    name = ID '=' token = STRING
;

// type definitions can be used in the same or different packages. It is important to know that
// any package defaults will apply at the location where the type is defined. This means that
// the type expansion will have the same features in different packages, even if they use different defaults. 
TypeDefinition:
    'type' name = ID 'is' datatype = DataType ';'
;

// Careful: Due to implementation of the validators, FieldDefinition may only be referenced from the ClassDefinition type!
FieldDefinition hidden(WS, ML_COMMENT):  // unhide SL_COMMENT
    (javadoc = JAVADOC_COMMENT)?
    (visibility = Visibility)?
    (required   = Required)?
    datatype    = DataType
    ((isAggregateRequired ?='required')? (isArray = ArrayModifier | isList = ListModifier | isSet = SetModifier | isMap = MapModifier))?
    name        = ID ('altGetter' getter = ID)? ('altSetter' setter = ID)?  // specify alternate getter / setters, for cornercases like mTimestamp
    ('default'    defaultString = STRING)?          
    ('properties' properties += PropertyUse (',' properties += PropertyUse)*)?  // unused in bonaparte, may be evaluated in other languages
    ';'
    (comment     = SL_COMMENT)?
;

DataType:
    (elementaryDataType=ElementaryDataType
        | ('(' objectDataType=ClassReference (orSuperClass?='...')? (',' secondaryObjectDataType=ClassReference  (orSecondarySuperClass?='...')?)? ')')  // unfortunately parentheses needed to avoid conflict with typeRef
        | referenceDataType=[TypeDefinition|QualifiedId]
    )  
;

ArrayModifier:
    {ArrayModifier}
    '[' ((mincount=INT '..')? maxcount=INT)? ']'
;
ListModifier:
    {ListModifier}
    'List' '<'((mincount=INT '..')? maxcount=INT)? '>'
;
SetModifier:
    {SetModifier}
    'Set' '<'((mincount=INT '..')? maxcount=INT)? '>'
;
MapModifier:
    {MapModifier}
    'Map' '<' indexType=('String' | 'Integer' | 'Long') (',' (mincount=INT '..')? maxcount=INT)? '>'
;
 
ElementaryDataType:
    (   name = ("boolean" | "Boolean"  | "day"       | "Day"       // some primitive types or their boxed equivalents
              | "char"    | "Char"     | "character" | "Character" // day is 8 digit number, YYYYMMDD
              | "uuid"    | "Uuid"     | "object"    | "Object" )
      | (name = ('enum'| 'Enum') enumType = [EnumDefinition|QualifiedId] (enumDefault?='default')? )  // enums are not precisely elementary data types in Java, but they do not require recursing another class
      | (name = ('xenum'| 'XEnum') xenumType = [XEnumDefinition|QualifiedId] (enumDefault?='default')? )  // xenums are not precisely elementary data types in Java, but they do not require recursing another class
      | (name= ("instant" | "Instant" | "timestamp" | "Timestamp" | "time" | "Time") ("(" length=INT ")")? (doHHMMSS ?= 'hhmmss')?)    // Joda-Time
      | ( 
         name=("ascii" | "Ascii" | "uppercase" | "Uppercase" | "lowercase" | "Lowercase") // ASCII 7 bit chars (0x20 - 0x7f)
           "(" (minLength=INT '..')? length=INT ")"
           (trimming   = Trimming)?          
           (truncating = Truncating)?
           ('regexp' regexp=STRING)?                )          
      | (name=("unicode"|"Unicode")                            // any displayable Unicode character
           "(" (minLength=INT '..')? length=INT ")"
           (trimming   = Trimming)?          
           (truncating = Truncating)?          
           (allowCtrls = SpecialCharsSetting)?      // Unicode fields: allow control characters
        )
      | (
           (signed = Signedness)?
           ((name=("decimal"|"Decimal")
                 "(" length=INT ("," decimals=INT)? ")"
                 (rounding = Rounding)?
                 (autoScale = AutoScale)?
            )
             | (name=("number"|"Number")       "(" length=INT ")")  // maps to int, long, BigInteger (currently only int)
             | name=("byte"|"Byte"|"short"|"Short"|"integer"|"Integer"|"int"|"Int"|"long"|"Long"|"float"|"Float"|"double"|"Double")  // numeric primitives with sign only
           )
         )
      | (name=("raw"|"Raw"|"binary"|"Binary")      "(" length=INT ")")  // byte array (raw = mutable, binary = immutable)
    )   
;
